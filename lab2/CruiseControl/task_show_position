void show_position(INT16U position)
{
  int out = 0;
  if ( position <= 2400 && postion >= 0) {
    if (position <= 400) {
      out = 0x20000;
      IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,out);
      }
    else if (position > 400 && position <= 800) {
        out = 0x30000;
        IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,out);
      } 
    else if (position > 800 && position <= 1200) {
        out = 0x38000;
        IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,out);
      } 
    else if (position > 1200 && position <= 1600) {
        out = 0x3C000;
        IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,out);
      }
    else if (position > 1600 && position <= 2000) {
        out = 0x3E000;
        IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,out);
      }
    else if (position > 2000 && position <= 2400) {
        out = 0x3F000;
        IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,out);
      } 
    } 
//  else  {
//      position = 0;      //want to reset position to zero //////////////////////////////////////////////////////////
//    }
}

/*
 * The function 'adjust_position()' adjusts the position depending on the
 * acceleration and velocity.
 */
 INT16U adjust_position(INT16U position, INT16S velocity,
                        INT8S acceleration, INT16U time_interval)
{
  INT16S new_position = position + velocity * time_interval / 1000
    + acceleration / 2  * (time_interval / 1000) * (time_interval / 1000);

  if (new_position > 24000) {
    new_position -= 24000;                ///////////////////////////noticed we reset it here///////////////
  } else if (new_position < 0){
    new_position += 24000;
  }
  
  show_position(new_position);
  return new_position;
}
